2024-12-01 21:26:41.758 | INFO     | __main__:<module>:16 - This is an INFO message
You are using a model of type qwen2 to instantiate a model of type llava_qwen. This is not supported for all configurations of models and can yield errors.
Sliding Window Attention is enabled but not implemented for `sdpa`; unexpected results may be encountered.
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()
  return self.fget.__get__(instance, owner)()
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.embeddings.class_embedding: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.embeddings.patch_embedding.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.embeddings.position_embedding.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.pre_layrnorm.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.pre_layrnorm.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.0.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.1.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.2.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.3.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.4.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.5.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.6.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.7.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.8.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.9.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.10.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.11.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.12.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.13.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.14.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.15.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.16.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.17.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.18.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.19.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.20.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.21.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.22.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.k_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.k_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.v_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.v_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.q_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.q_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.out_proj.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.self_attn.out_proj.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.layer_norm1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.layer_norm1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.mlp.fc1.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.mlp.fc1.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.mlp.fc2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.mlp.fc2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.layer_norm2.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.encoder.layers.23.layer_norm2.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.post_layernorm.weight: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
/share/minghao/Envs/videoxl/lib/python3.10/site-packages/torch/nn/modules/module.py:2025: UserWarning: for vision_model.post_layernorm.bias: copying from a non-meta parameter in the checkpoint to a meta parameter in the current model, which is a no-op. (Did you mean to pass `assign=True` to assign items in the state dictionary to their corresponding key in the module instead of copying them in place?)
  warnings.warn(f'for {key}: copying from a non-meta parameter in the checkpoint to a meta '
_attn_implementation: sdpa
Loading checkpoint shards:   0%|                                                               | 0/4 [00:00<?, ?it/s]Loading checkpoint shards:  25%|█████████████▊                                         | 1/4 [00:02<00:07,  2.37s/it]Loading checkpoint shards:  50%|███████████████████████████▌                           | 2/4 [00:06<00:07,  3.67s/it]Loading checkpoint shards:  75%|█████████████████████████████████████████▎             | 3/4 [00:09<00:03,  3.08s/it]Loading checkpoint shards: 100%|███████████████████████████████████████████████████████| 4/4 [00:10<00:00,  2.40s/it]Loading checkpoint shards: 100%|███████████████████████████████████████████████████████| 4/4 [00:10<00:00,  2.67s/it]
The new embeddings will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
The new lm_head weights will be initialized from a multivariate normal distribution that has old embeddings' mean and covariance. As described in this article: https://nlp.stanford.edu/~johnhew/vocab-expansion.html. To disable this, use `mean_resizing=False`
启用 reload 机制
使用的 top_k=3
0 暂时保存原 q k v states
2024-12-01 21:27:30.112 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.112 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.187 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.187 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 0[0m
2024-12-01 21:27:30.187 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.187 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.188 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0048, 0.0048, 0.0048]], device='cuda:0')[0m
2024-12-01 21:27:30.188 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([25,  1,  0], device='cuda:0')[0m
2024-12-01 21:27:30.188 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.188 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.188 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
1 暂时保存原 q k v states
2024-12-01 21:27:30.192 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.192 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.196 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.196 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 1[0m
2024-12-01 21:27:30.196 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.196 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.197 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0061, 0.0060, 0.0058]], device='cuda:0')[0m
2024-12-01 21:27:30.197 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 3], device='cuda:0')[0m
2024-12-01 21:27:30.197 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.197 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.197 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
2 暂时保存原 q k v states
2024-12-01 21:27:30.200 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.200 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.204 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.204 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 2[0m
2024-12-01 21:27:30.204 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.204 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.205 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0049, 0.0048, 0.0048]], device='cuda:0')[0m
2024-12-01 21:27:30.205 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([24,  3,  7], device='cuda:0')[0m
2024-12-01 21:27:30.205 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.205 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.205 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
3 暂时保存原 q k v states
2024-12-01 21:27:30.208 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.208 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.212 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.212 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 3[0m
2024-12-01 21:27:30.212 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.212 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.213 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0070, 0.0060, 0.0054]], device='cuda:0')[0m
2024-12-01 21:27:30.213 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.213 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.213 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.213 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
4 暂时保存原 q k v states
2024-12-01 21:27:30.216 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.216 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.220 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.220 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 4[0m
2024-12-01 21:27:30.220 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.220 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.221 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0066, 0.0059, 0.0051]], device='cuda:0')[0m
2024-12-01 21:27:30.221 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 8], device='cuda:0')[0m
2024-12-01 21:27:30.221 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.221 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.221 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
5 暂时保存原 q k v states
2024-12-01 21:27:30.224 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.224 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.228 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.228 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 5[0m
2024-12-01 21:27:30.228 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.228 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.229 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0046, 0.0043, 0.0035]], device='cuda:0')[0m
2024-12-01 21:27:30.229 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.229 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.229 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.229 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
6 暂时保存原 q k v states
2024-12-01 21:27:30.232 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.232 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.236 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.236 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 6[0m
2024-12-01 21:27:30.236 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.236 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.236 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0065, 0.0059, 0.0052]], device='cuda:0')[0m
2024-12-01 21:27:30.237 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.237 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.237 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.237 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
7 暂时保存原 q k v states
2024-12-01 21:27:30.240 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.240 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.244 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.244 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 7[0m
2024-12-01 21:27:30.244 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.244 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.244 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0076, 0.0062, 0.0052]], device='cuda:0')[0m
2024-12-01 21:27:30.245 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.245 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.245 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.245 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
8 暂时保存原 q k v states
2024-12-01 21:27:30.248 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.248 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.252 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.252 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 8[0m
2024-12-01 21:27:30.252 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.252 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.252 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0057, 0.0049, 0.0045]], device='cuda:0')[0m
2024-12-01 21:27:30.253 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.253 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.253 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.253 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
9 暂时保存原 q k v states
2024-12-01 21:27:30.255 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.256 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.259 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.260 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 9[0m
2024-12-01 21:27:30.260 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.260 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.260 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0054, 0.0047, 0.0039]], device='cuda:0')[0m
2024-12-01 21:27:30.260 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0,  1, 11], device='cuda:0')[0m
2024-12-01 21:27:30.261 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.261 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.261 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
10 暂时保存原 q k v states
2024-12-01 21:27:30.263 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.264 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.267 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.267 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 10[0m
2024-12-01 21:27:30.268 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.268 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.268 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0061, 0.0052, 0.0048]], device='cuda:0')[0m
2024-12-01 21:27:30.268 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.268 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.269 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.269 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
11 暂时保存原 q k v states
2024-12-01 21:27:30.271 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.272 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.275 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.275 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 11[0m
2024-12-01 21:27:30.275 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.276 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.276 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0060, 0.0047, 0.0041]], device='cuda:0')[0m
2024-12-01 21:27:30.276 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.276 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.276 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.276 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
12 暂时保存原 q k v states
2024-12-01 21:27:30.279 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.279 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.283 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.283 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 12[0m
2024-12-01 21:27:30.283 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.283 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.284 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0049, 0.0035, 0.0029]], device='cuda:0')[0m
2024-12-01 21:27:30.284 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.284 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.284 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.284 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
13 暂时保存原 q k v states
2024-12-01 21:27:30.287 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.287 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.291 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.291 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 13[0m
2024-12-01 21:27:30.291 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.291 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.292 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0045, 0.0039, 0.0038]], device='cuda:0')[0m
2024-12-01 21:27:30.292 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0, 11,  1], device='cuda:0')[0m
2024-12-01 21:27:30.292 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.292 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.292 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
14 暂时保存原 q k v states
2024-12-01 21:27:30.295 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.295 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.299 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.299 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 14[0m
2024-12-01 21:27:30.299 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.299 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.300 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0032, 0.0027, 0.0022]], device='cuda:0')[0m
2024-12-01 21:27:30.300 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([11,  0,  2], device='cuda:0')[0m
2024-12-01 21:27:30.300 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.300 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.300 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
15 暂时保存原 q k v states
2024-12-01 21:27:30.303 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.303 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.307 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.307 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 15[0m
2024-12-01 21:27:30.307 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.307 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.308 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0059, 0.0048, 0.0047]], device='cuda:0')[0m
2024-12-01 21:27:30.308 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0,  1, 11], device='cuda:0')[0m
2024-12-01 21:27:30.308 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.308 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.308 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
16 暂时保存原 q k v states
2024-12-01 21:27:30.311 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.311 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.315 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.315 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 16[0m
2024-12-01 21:27:30.315 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.315 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.316 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0051, 0.0038, 0.0035]], device='cuda:0')[0m
2024-12-01 21:27:30.316 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0, 11,  1], device='cuda:0')[0m
2024-12-01 21:27:30.316 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.316 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.316 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
17 暂时保存原 q k v states
2024-12-01 21:27:30.319 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.319 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.323 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.323 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 17[0m
2024-12-01 21:27:30.323 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.323 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.324 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0049, 0.0033, 0.0032]], device='cuda:0')[0m
2024-12-01 21:27:30.324 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0,  1, 11], device='cuda:0')[0m
2024-12-01 21:27:30.324 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.324 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.324 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
18 暂时保存原 q k v states
2024-12-01 21:27:30.327 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.327 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.331 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.331 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 18[0m
2024-12-01 21:27:30.331 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.331 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.332 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0061, 0.0047, 0.0046]], device='cuda:0')[0m
2024-12-01 21:27:30.332 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0, 11,  1], device='cuda:0')[0m
2024-12-01 21:27:30.332 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.332 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.332 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
19 暂时保存原 q k v states
2024-12-01 21:27:30.335 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.335 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.339 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.339 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 19[0m
2024-12-01 21:27:30.339 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.339 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.340 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0062, 0.0042, 0.0040]], device='cuda:0')[0m
2024-12-01 21:27:30.340 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0, 11,  1], device='cuda:0')[0m
2024-12-01 21:27:30.340 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.340 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.340 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
20 暂时保存原 q k v states
2024-12-01 21:27:30.343 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.343 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.347 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.347 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 20[0m
2024-12-01 21:27:30.347 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.347 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.348 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0070, 0.0045, 0.0040]], device='cuda:0')[0m
2024-12-01 21:27:30.348 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.348 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.348 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.348 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
21 暂时保存原 q k v states
2024-12-01 21:27:30.351 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.351 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.355 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.355 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 21[0m
2024-12-01 21:27:30.355 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.355 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.355 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0064, 0.0046, 0.0041]], device='cuda:0')[0m
2024-12-01 21:27:30.356 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.356 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.356 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.356 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
22 暂时保存原 q k v states
2024-12-01 21:27:30.359 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.359 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.363 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.363 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 22[0m
2024-12-01 21:27:30.363 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.363 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.363 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0041, 0.0023, 0.0020]], device='cuda:0')[0m
2024-12-01 21:27:30.364 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.364 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.364 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.364 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
23 暂时保存原 q k v states
2024-12-01 21:27:30.366 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.367 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.370 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.371 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 23[0m
2024-12-01 21:27:30.371 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.371 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.371 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0050, 0.0037, 0.0033]], device='cuda:0')[0m
2024-12-01 21:27:30.371 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0, 11,  1], device='cuda:0')[0m
2024-12-01 21:27:30.372 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.372 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.372 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
24 暂时保存原 q k v states
2024-12-01 21:27:30.374 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.375 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.378 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.378 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 24[0m
2024-12-01 21:27:30.378 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.379 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.379 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0056, 0.0042, 0.0041]], device='cuda:0')[0m
2024-12-01 21:27:30.379 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([ 0, 11,  1], device='cuda:0')[0m
2024-12-01 21:27:30.379 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.379 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.380 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
25 暂时保存原 q k v states
2024-12-01 21:27:30.382 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.382 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.386 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.386 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 25[0m
2024-12-01 21:27:30.386 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.386 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.387 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0072, 0.0054, 0.0051]], device='cuda:0')[0m
2024-12-01 21:27:30.387 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.387 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.387 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.387 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
26 暂时保存原 q k v states
2024-12-01 21:27:30.390 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.390 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.394 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.394 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 26[0m
2024-12-01 21:27:30.394 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.394 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.395 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0082, 0.0051, 0.0048]], device='cuda:0')[0m
2024-12-01 21:27:30.395 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.395 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.395 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.395 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
27 暂时保存原 q k v states
2024-12-01 21:27:30.398 | INFO     | videoxl.model.language_model.llava_qwen:forward:960 - position_ids_for_attn_score: tensor([[0, 0, 0,  ..., 0, 0, 0]])
2024-12-01 21:27:30.398 | INFO     | videoxl.model.language_model.llava_qwen:forward:961 - position_ids_for_attn_score[:50]: tensor([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0]])
不启用位置编码
2024-12-01 21:27:30.402 | INFO     | videoxl.model.language_model.llava_qwen:print_info:819 - [92m====================================================================================================[0m
2024-12-01 21:27:30.402 | INFO     | videoxl.model.language_model.llava_qwen:print_info:829 - [92mLayer_Idx: 27[0m
2024-12-01 21:27:30.402 | INFO     | videoxl.model.language_model.llava_qwen:print_info:830 - [92mTotal Chunks Num: 26[0m
2024-12-01 21:27:30.402 | INFO     | videoxl.model.language_model.llava_qwen:print_info:831 - [92mChunks: [(1, 14, 194), (2, 194, 374), (3, 374, 554), (4, 554, 734), (5, 734, 914), (6, 914, 1094), (7, 1094, 1274), (8, 1274, 1454), (9, 1454, 1634), (10, 1634, 1814), (11, 1814, 1994), (12, 1994, 2174), (13, 2174, 2354), (14, 2354, 2534), (15, 2534, 2714), (16, 2714, 2894), (17, 2894, 3074), (18, 3074, 3254), (19, 3254, 3434), (20, 3434, 3614), (21, 3614, 3794), (22, 3794, 3974), (23, 3974, 4154), (24, 4154, 4334), (25, 4334, 4514), (26, 4514, 4622)][0m
2024-12-01 21:27:30.403 | INFO     | videoxl.model.language_model.llava_qwen:print_info:832 - [92mtopk_values: tensor([[0.0105, 0.0073, 0.0061]], device='cuda:0')[0m
2024-12-01 21:27:30.403 | INFO     | videoxl.model.language_model.llava_qwen:print_info:833 - [92mtopk_indices: tensor([0, 1, 2], device='cuda:0')[0m
2024-12-01 21:27:30.403 | INFO     | videoxl.model.language_model.llava_qwen:print_info:834 - [92moriginal_kv_seq_length: None[0m
2024-12-01 21:27:30.403 | INFO     | videoxl.model.language_model.llava_qwen:print_info:835 - [92mnow_kv_seq_length: None[0m
2024-12-01 21:27:30.403 | INFO     | videoxl.model.language_model.llava_qwen:print_info:837 - [92m====================================================================================================[0m
This is a friendly reminder - the current text generation call will exceed the model's predefined maximum length (32768). Depending on the model, you may observe exceptions, performance degradation, or nothing at all.
The specific content of advertisements cannot be inferred from the provided images and context. However, given the environment described as "the entrance to a small town," there might
